/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package continental.vistas;

import continental.accesoADatos.ValidarData;
import continental.entidades.Categoria;
import continental.entidades.Habitacion;
import continental.entidades.Reserva;
import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author valen
 */
public class GestionDeHabitacion extends javax.swing.JInternalFrame {

    private  Map<Integer,Categoria> listaDeHab=new HashMap();
    public GestionDeHabitacion() {
        initComponents();
        cargarCB();
         jCBCategorias.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDPEscritorio = new javax.swing.JDesktopPane();
        ImageIcon icon = new ImageIcon(getClass().getResource("/continental/imagenes/WindowBackground.png"));
        Image image = icon.getImage();
        jPBackground = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                g.drawImage(image,0,0,getWidth(),getHeight(),this);
            }
        };
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jBBuscar = new javax.swing.JButton();
        jTFCodigo = new javax.swing.JTextField();
        jTFPiso = new javax.swing.JTextField();
        jTFNumero = new javax.swing.JTextField();
        jBLimpiar = new javax.swing.JButton();
        jBEliminar = new javax.swing.JButton();
        jBGuardar = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();
        jLPCabecera = new javax.swing.JLayeredPane();
        jLMargen = new javax.swing.JLabel();
        jLTitulo = new javax.swing.JLabel();
        jLLogo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jCBCategorias = new javax.swing.JComboBox<>();
        jLLogo1 = new javax.swing.JLabel();

        jDPEscritorio.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                jDPEscritorioComponentRemoved(evt);
            }
        });

        jPBackground.setBackground(new java.awt.Color(51, 51, 51));

        jLabel2.setForeground(new java.awt.Color(235, 235, 235));
        jLabel2.setText("Codigo:");

        jLabel3.setForeground(new java.awt.Color(235, 235, 235));
        jLabel3.setText("Piso");

        jLabel4.setForeground(new java.awt.Color(235, 235, 235));
        jLabel4.setText("Numero de Habitacion");

        jBBuscar.setBackground(new java.awt.Color(51, 51, 51));
        jBBuscar.setForeground(new java.awt.Color(235, 235, 235));
        jBBuscar.setText("Buscar");
        jBBuscar.setIconTextGap(10);
        jBBuscar.setPreferredSize(new java.awt.Dimension(100, 32));
        jBBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBBuscarActionPerformed(evt);
            }
        });

        jTFCodigo.setEditable(false);
        jTFCodigo.setBackground(new java.awt.Color(102, 102, 102));
        jTFCodigo.setForeground(new java.awt.Color(255, 255, 255));

        jTFPiso.setBackground(new java.awt.Color(102, 102, 102));
        jTFPiso.setForeground(new java.awt.Color(255, 255, 255));

        jTFNumero.setBackground(new java.awt.Color(102, 102, 102));
        jTFNumero.setForeground(new java.awt.Color(255, 255, 255));

        jBLimpiar.setBackground(new java.awt.Color(51, 51, 51));
        jBLimpiar.setForeground(new java.awt.Color(235, 235, 235));
        jBLimpiar.setText("Limpiar");
        jBLimpiar.setIconTextGap(10);
        jBLimpiar.setPreferredSize(new java.awt.Dimension(100, 32));
        jBLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimpiarActionPerformed(evt);
            }
        });

        jBEliminar.setBackground(new java.awt.Color(51, 51, 51));
        jBEliminar.setForeground(new java.awt.Color(235, 235, 235));
        jBEliminar.setText("Demoler");
        jBEliminar.setIconTextGap(10);
        jBEliminar.setPreferredSize(new java.awt.Dimension(105, 32));
        jBEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarActionPerformed(evt);
            }
        });

        jBGuardar.setBackground(new java.awt.Color(51, 51, 51));
        jBGuardar.setForeground(new java.awt.Color(235, 235, 235));
        jBGuardar.setText("Guardar");
        jBGuardar.setIconTextGap(10);
        jBGuardar.setPreferredSize(new java.awt.Dimension(105, 32));
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jBSalir.setBackground(new java.awt.Color(51, 51, 51));
        jBSalir.setForeground(new java.awt.Color(235, 235, 235));
        jBSalir.setText("Salir");
        jBSalir.setIconTextGap(10);
        jBSalir.setPreferredSize(new java.awt.Dimension(100, 32));
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        jLTitulo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLTitulo.setForeground(new java.awt.Color(235, 235, 235));
        jLTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLTitulo.setText("GESTION DE HABITACIONES");

        jLPCabecera.setLayer(jLMargen, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLPCabecera.setLayer(jLTitulo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLPCabecera.setLayer(jLLogo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLPCabeceraLayout = new javax.swing.GroupLayout(jLPCabecera);
        jLPCabecera.setLayout(jLPCabeceraLayout);
        jLPCabeceraLayout.setHorizontalGroup(
            jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLPCabeceraLayout.createSequentialGroup()
                .addComponent(jLMargen, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLLogo))
        );
        jLPCabeceraLayout.setVerticalGroup(
            jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLPCabeceraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLMargen, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel6.setForeground(new java.awt.Color(235, 235, 235));
        jLabel6.setText("Categoria");

        jLLogo1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/continental/imagenes/LogoULP3-w.png"))); // NOI18N

        javax.swing.GroupLayout jPBackgroundLayout = new javax.swing.GroupLayout(jPBackground);
        jPBackground.setLayout(jPBackgroundLayout);
        jPBackgroundLayout.setHorizontalGroup(
            jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBackgroundLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLPCabecera)
                    .addGroup(jPBackgroundLayout.createSequentialGroup()
                        .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(55, 55, 55)
                        .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBackgroundLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBackgroundLayout.createSequentialGroup()
                                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBackgroundLayout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(4, 4, 4)))
                        .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFNumero, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jCBCategorias, javax.swing.GroupLayout.Alignment.LEADING, 0, 125, Short.MAX_VALUE)
                                .addComponent(jTFPiso, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLLogo1)
                .addGap(7, 7, 7))
        );
        jPBackgroundLayout.setVerticalGroup(
            jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBackgroundLayout.createSequentialGroup()
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLPCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLLogo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTFNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPBackgroundLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jBLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPBackgroundLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTFPiso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jCBCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(jPBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jDPEscritorio.setLayer(jPBackground, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDPEscritorioLayout = new javax.swing.GroupLayout(jDPEscritorio);
        jDPEscritorio.setLayout(jDPEscritorioLayout);
        jDPEscritorioLayout.setHorizontalGroup(
            jDPEscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDPEscritorioLayout.setVerticalGroup(
            jDPEscritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDPEscritorioLayout.createSequentialGroup()
                .addComponent(jPBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDPEscritorio)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDPEscritorio)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBBuscarActionPerformed

        if (jTFNumero.getText().isEmpty()) {

            JOptionPane.showMessageDialog(this, "Ingrese el numero de la habitacion.");
            return;
        }
        try {
        
            int nDH=Integer.parseInt(jTFNumero.getText());
        

            //Se busca la materia en la base de datos y se guarda
            Habitacion hab = Vista.getHabD().buscarHabitacionPorNumero(nDH);

            //Si la materia recibida tiene valor nulo significa que no se encuentra en la DB
            //Se muestra el mensaje al usuario y se finaliza la ejecucion
            if (hab == null) {
                JOptionPane.showMessageDialog(this, "No existe la habitacion");
                return;
            }

            //Si la materia se encontraba en la DB, se setean los campos correspondientes con los valores obtenidos de la materia
            jTFCodigo.setText(hab.getIdHabitacion()+"");
            jTFNumero.setText(hab.getNro()+"");
            jTFPiso.setText(hab.getPiso() + "");
                   for (Map.Entry<Integer, Categoria> entry : listaDeHab.entrySet()) {
                Integer key = entry.getKey();
                Categoria value = entry.getValue();
                       if (hab.getCategoria().getIdCategoria()==value.getIdCategoria()) {
                           jCBCategorias.setSelectedIndex(key);
                       }
            } 
            
               
   
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(this, "El numero de la habitacion es incorrecto.");
        } catch (NullPointerException e) {

            JOptionPane.showMessageDialog(this, "No existe la habitacion");
        }
    }//GEN-LAST:event_jBBuscarActionPerformed

    private void jBLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimpiarActionPerformed

        //Resetea todos los textfield
        limpiar();
    }//GEN-LAST:event_jBLimpiarActionPerformed

    private void jBEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarActionPerformed
//Se controla que el campo de numero no se encuentre vacio
              if (jTFNumero.getText().isEmpty()){

            JOptionPane.showMessageDialog(this, "La casilla Nombre no debe estar vacia.");
            return;
        }
        try {

        int numero = Integer.parseInt(jTFNumero.getText());
        

      
        //Se crea una habitacion y se busca en la base de datos para confirmar que la habitacion existe
        //En caso que la habitacion no se encuentre en la base de datos, se muestra un mensaje al usuario y se finaliza la ejecucion
        Habitacion hab = Vista.getHabD().buscarHabitacionPorNumero(numero);
        if (hab == null) {

            JOptionPane.showMessageDialog(this, "No existe la habitacion");
            return;
        }
//El problema que encuentro es que si las habitaciones son eliminadas tendran reservas asociadas y ademas. Mi idea es que si el usuario desea eliminar una habitacion debera eliminar pirmero
//las reservas que tenga asociada. Podemos poner un cartel que diga que si la habitacion que encontramos no es nula y ademas tiene asociada reservas no podra eliminarla.
        //Si la habitacion se encontraba en la base de datos, se recupera su estado para confirmar que no haya sido eliminado anteriormente
        
        ArrayList <Reserva> reservas=new ArrayList();
            for (Reserva reserva : reservas) {
                if (hab==reserva.getHabitacion()) {
                 JOptionPane.showMessageDialog(this, "La habitacion que desea eliminar tiene reservas asociadas."
                         + "\n Primero elimine todas las reservas asociadas a esta habiatacion");   
                }
            }
        
            //Habiendo confirmado que el numero de la habitacion es correcto, que la habitacion existe en la DB y que su no tiene reservas asociadas
            
           int resp = JOptionPane.showConfirmDialog(this, "¿Esta seguro que desea eliminar esta habitacion?", "", JOptionPane.YES_OPTION);
            int registro;
            if (resp == 0) {
                registro = Vista.getHabD().eliminarHabitacion(hab.getIdHabitacion());
                
                if (registro == 1) {
                
                    JOptionPane.showMessageDialog(this, "La habitacion ha sido borrada");
                } else {
                
                    JOptionPane.showMessageDialog(this, "No se pudo borrar la habitacion");
                }
            }
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(this, "El numero de la habitacion es incorrecto.");
        }
    }//GEN-LAST:event_jBEliminarActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed

        //Controla que no hayan campos vacios
       
        if (jTFNumero.getText().isEmpty() || jTFPiso.getText().isEmpty()||jCBCategorias.getSelectedIndex()==0) {

            JOptionPane.showMessageDialog(this, "Ningun casillero debe estar vacio");
            return;
        }

        try {

            //Se intenta parsear el numero y el piso de la habitacion
            int numero=Integer.parseInt(jTFNumero.getText());
            int piso = Integer.parseInt(jTFPiso.getText());
            if (ValidarData.validarNumero(numero)) {

                JOptionPane.showMessageDialog(this, "En la casilla numero debe ir un dato valido");
                return;
            }
            if (ValidarData.validarPiso(piso)) {

                JOptionPane.showMessageDialog(this, "En la casilla piso debe ir un dato valido");
                return;
            }

            //Llegado el punto en que todos los valores son correctos, se crea una materia
            Habitacion hab = new Habitacion(piso, numero, (Categoria)jCBCategorias.getSelectedItem(), true);

            //Se crea una variable tipo entero y se usa para almacenar el registro de la ejecucion del metodo guardarMateria
            int registro = Vista.getHabD().guardarHabitacion(hab);

            //Dependiendo del valor que tome la variable registro se muestra un mensaje al usuario
            if (registro > 0) {

                JOptionPane.showMessageDialog(this, "La habitacion ha sido guardada");
            } else {

                JOptionPane.showMessageDialog(this, "No se pudo agregar la habitacion, el numero ya existe");
            }

            //Se limpian los campos
            limpiar();
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(this, "En la casilla numero y piso deben ir solo numeros.");
        } catch (NullPointerException e) {

            JOptionPane.showMessageDialog(this, "Ningun casillero debe estar vacio");
        }
    }//GEN-LAST:event_jBGuardarActionPerformed

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed

        //Cierra la ventana
        dispose();
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jDPEscritorioComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jDPEscritorioComponentRemoved

        /**
        * Se captura el evento de cierre de ventana de confirmacion al eliminar una materia.
        * Luego se busca la materia que se intento eliminar y se recupera su estado.
        * Por ultimo se setea el componente radioButton estado con el valor de estado de la materia.
        */
       
    }//GEN-LAST:event_jDPEscritorioComponentRemoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBBuscar;
    private javax.swing.JButton jBEliminar;
    private javax.swing.JButton jBGuardar;
    private javax.swing.JButton jBLimpiar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JComboBox<Categoria> jCBCategorias;
    private javax.swing.JDesktopPane jDPEscritorio;
    private javax.swing.JLabel jLLogo;
    private javax.swing.JLabel jLLogo1;
    private javax.swing.JLabel jLMargen;
    private javax.swing.JLayeredPane jLPCabecera;
    private javax.swing.JLabel jLTitulo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPBackground;
    private javax.swing.JTextField jTFCodigo;
    private javax.swing.JTextField jTFNumero;
    private javax.swing.JTextField jTFPiso;
    // End of variables declaration//GEN-END:variables

    private void limpiar() {
        jTFCodigo.setText("");
        jTFNumero.setText("");
        jTFPiso.setText("");
        jCBCategorias.setSelectedIndex(0);
      

    }
    private void cargarCB() {

        //Agregamos en el primer lugar un alumno vacio
        Categoria vacio = new Categoria() {
            @Override
            public String toString() {
                return "Seleccione una categoria...";
            }
        };
        jCBCategorias.addItem(vacio);

        //Se recupera una lista de alumnos
        ArrayList<Categoria> Lista = Vista.getCD().listarCategorias();
       int i=0;
        for (Categoria categoria : Lista) {
            listaDeHab.put(i+1, categoria);
            i++;
        }
        //Se recorre la lista y cada alumno se agrega al CB
        for (Categoria cat : Lista) {
            jCBCategorias.addItem(cat);
        }
    }
}
