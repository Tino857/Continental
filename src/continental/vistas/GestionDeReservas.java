package continental.vistas;

import continental.entidades.Categoria;
import continental.entidades.Habitacion;
import continental.entidades.Reserva;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Grupo 61
 */
public class GestionDeReservas extends javax.swing.JInternalFrame {

    //Se crea el modelo que usaremos en la tabla, y se impide que se puedan modificar los valores de las celdas
    private final DefaultTableModel modelo = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int f, int c) {

            return false;
        }
    };

    public GestionDeReservas() {

        initComponents();
        armarTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        ImageIcon icon = new ImageIcon(getClass().getResource("/continental/imagenes/WindowBackground.png"));
        Image image = icon.getImage();
        jPanel1 = new javax.swing.JPanel(){

            public void paintComponent(Graphics g){
                g.drawImage(image,0,0,getWidth(),getHeight(),this);
            }
        };
        jDCInicio = new com.toedter.calendar.JDateChooser();
        jDCFinal = new com.toedter.calendar.JDateChooser();
        jBFiltrar = new javax.swing.JButton();
        jLPCabecera = new javax.swing.JLayeredPane();
        jLMargen = new javax.swing.JLabel();
        jLTitulo = new javax.swing.JLabel();
        jLLogo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTFCantidad = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCBCategorias = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jTFPrecio = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jBSiguiente = new javax.swing.JButton();
        jBLimpiar = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jDesktopPane1.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jDesktopPane1ComponentAdded(evt);
            }
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                jDesktopPane1ComponentRemoved(evt);
            }
        });

        jDCInicio.setBackground(new java.awt.Color(85, 94, 100));
        jDCInicio.setForeground(new java.awt.Color(255, 255, 255));

        jDCFinal.setBackground(new java.awt.Color(85, 94, 100));

        jBFiltrar.setBackground(new java.awt.Color(45, 54, 60));
        jBFiltrar.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jBFiltrar.setForeground(new java.awt.Color(255, 255, 255));
        jBFiltrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/continental/imagenes/buscar-w.png"))); // NOI18N
        jBFiltrar.setText("Filtrar");
        jBFiltrar.setIconTextGap(10);
        jBFiltrar.setPreferredSize(new java.awt.Dimension(110, 32));
        jBFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFiltrarActionPerformed(evt);
            }
        });

        jLMargen.setPreferredSize(new java.awt.Dimension(63, 64));

        jLTitulo.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLTitulo.setForeground(new java.awt.Color(255, 255, 255));
        jLTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLTitulo.setText("GESTIÓN DE RESERVAS");

        jLLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/continental/imagenes/LogoSmall-w.png"))); // NOI18N

        jLPCabecera.setLayer(jLMargen, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLPCabecera.setLayer(jLTitulo, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLPCabecera.setLayer(jLLogo, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLPCabeceraLayout = new javax.swing.GroupLayout(jLPCabecera);
        jLPCabecera.setLayout(jLPCabeceraLayout);
        jLPCabeceraLayout.setHorizontalGroup(
            jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLPCabeceraLayout.createSequentialGroup()
                .addComponent(jLMargen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLLogo))
        );
        jLPCabeceraLayout.setVerticalGroup(
            jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jLPCabeceraLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLPCabeceraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLLogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLMargen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Fecha Inicio:");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Fecha Fin:");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cantidad Personas:");

        jTFCantidad.setBackground(new java.awt.Color(85, 94, 100));
        jTFCantidad.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jTFCantidad.setForeground(new java.awt.Color(255, 255, 255));
        jTFCantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTFCantidadKeyReleased(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Categoría:");

        jCBCategorias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBCategoriasActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Precio:");

        jTFPrecio.setEditable(false);
        jTFPrecio.setBackground(new java.awt.Color(85, 94, 100));
        jTFPrecio.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
        jTFPrecio.setForeground(new java.awt.Color(190, 190, 190));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jBSiguiente.setBackground(new java.awt.Color(45, 54, 60));
        jBSiguiente.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jBSiguiente.setForeground(new java.awt.Color(255, 255, 255));
        jBSiguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/continental/imagenes/aceptar-c.png"))); // NOI18N
        jBSiguiente.setText("Siguiente");
        jBSiguiente.setIconTextGap(10);
        jBSiguiente.setPreferredSize(new java.awt.Dimension(110, 32));
        jBSiguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSiguienteActionPerformed(evt);
            }
        });

        jBLimpiar.setBackground(new java.awt.Color(45, 54, 60));
        jBLimpiar.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jBLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        jBLimpiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/continental/imagenes/limpiar-w.png"))); // NOI18N
        jBLimpiar.setText("Limpiar");
        jBLimpiar.setIconTextGap(10);
        jBLimpiar.setPreferredSize(new java.awt.Dimension(110, 32));
        jBLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBLimpiarActionPerformed(evt);
            }
        });

        jBSalir.setBackground(new java.awt.Color(45, 54, 60));
        jBSalir.setFont(new java.awt.Font("Dialog", 1, 13)); // NOI18N
        jBSalir.setForeground(new java.awt.Color(255, 255, 255));
        jBSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/continental/imagenes/salir-w.png"))); // NOI18N
        jBSalir.setText("Salir");
        jBSalir.setIconTextGap(10);
        jBSalir.setPreferredSize(new java.awt.Dimension(110, 32));
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLPCabecera)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jTFCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jDCInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jDCFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jBFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jCBCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(58, 58, 58)
                                .addComponent(jLabel5)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTFPrecio))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jBLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(89, 89, 89)
                        .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLPCabecera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDCInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDCFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTFCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBCategorias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jTFPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jBFiltrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBSalir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBSiguiente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        jDesktopPane1.setLayer(jPanel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jDesktopPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //BOTON FILTRAR
    private void jBFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFiltrarActionPerformed

        //Llama al metodo encargado de limpiar la tabla de reservas, y al de comprobar datos
        limpiarTabla();
        if (comprobarDatos()) {
            //Si hay datos erroneos se finaliza la ejecucion
            return;
        }
        //Se llama al metodo encargado de cargar las reservas en la tabla
        cargarDatos();
    }//GEN-LAST:event_jBFiltrarActionPerformed

    //CANTIDAD
    private void jTFCantidadKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTFCantidadKeyReleased

        try {
            //Se limpia la tabla y el CB
            limpiarTabla();
            jCBCategorias.removeAllItems();
            //Se intenta parsear el numero
            int cantidad = Integer.parseInt(jTFCantidad.getText());
            //Si el valor esta fuera de los indices se finaliza la ejecucion
            if (cantidad < 1 || cantidad > 4) {

                return;
            }
            //Se crea una lista de categorias
            ArrayList<Categoria> ListaDeCategorias = Vista.getCD().listarCategorias();
            //Se recorre la lista y si el maximo de personas de la categoria es mayor o igual a la cantidad de personas de la reserva, se agrega la categoria al CB
            for (Categoria cat : ListaDeCategorias) {
                if ((cat.getCantDePersonas() >= Integer.parseInt(jTFCantidad.getText()))) {

                    jCBCategorias.addItem(cat);
                }
            }
        } catch (NumberFormatException | NullPointerException e) {
            jCBCategorias.removeAllItems();
        }
    }//GEN-LAST:event_jTFCantidadKeyReleased

    //COMBO BOX
    private void jCBCategoriasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBCategoriasActionPerformed

        //Se recupera la cartegoria seleccionada del CB
        Categoria cat = (Categoria) jCBCategorias.getSelectedItem();
        //Se setea el texfield de precio con el precio correspondiente a la categoria seleccionada
        if (cat == null) {

            jTFPrecio.setText("");
        } else {

            jTFPrecio.setText(cat.getPrecio() + "");
        }
    }//GEN-LAST:event_jCBCategoriasActionPerformed

    //BOTON SIGUIENTE
    private void jBSiguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSiguienteActionPerformed

        try {
            //Se convierten las fechas de los date chooser a LocalDate
            LocalDate fi = jDCInicio.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate ff = jDCFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            //Se parsea la cantidad de personas
            int cantidadPersonas = Integer.parseInt(jTFCantidad.getText());

            //Se llama al metodo encargado de comprobar los datos
            if (comprobarDatos()) {
                //Si hay datos erroneos se finaliza la ejecucion
                return;
            }

            //Se verifica que esté seleccionada una fila de la tabla
            if (jTable1.getSelectedRow() == -1) {

                JOptionPane.showMessageDialog(this, "Seleccione una habitacion para continuar", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
                return;
            }

            //Se recupera la fila seleccionada de la tabla
            int filaSelec = jTable1.getSelectedRow();

            //Se recupera el numero de habitacion de la tala, y con el se recupera una habitacion
            Habitacion hab = Vista.getHabD().buscarHabitacionPorNumero(Integer.parseInt((String) modelo.getValueAt(filaSelec, 1)));

            //Se controla que la habitacion este disponible en la fecha seleccionada
            ArrayList<Reserva> ListaDeReserva = Vista.getRD().listarReservas();
            for (Reserva reserva : ListaDeReserva) {

                if (reserva.getHabitacion().getNro() == hab.getNro()) {
                    if (!((fi.isBefore(reserva.getFi()) && ff.isBefore(reserva.getFi())) || (fi.isAfter(reserva.getFf()) && ff.isAfter(reserva.getFf())))) {

                        JOptionPane.showMessageDialog(this, "La habitacion seleccionada no está disponible en esa fecha", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
                        limpiarTabla();
                        return;
                    }
                }
            }

            //Teniendo todos los valores correctos, pasamos a seleccionar el huesped que sera el titular de la reserva
            //Creamos una variable para almacenar la respuesta y preguntamos al usuario si es un huesped nuevo
            int respuesta = JOptionPane.showConfirmDialog(this, "¿Es un husped nuevo?", "", JOptionPane.YES_NO_OPTION);
            if (respuesta == 0) {

                //De responder que si, se mustra la ventana de gestion de huespedes, que permitira ingresar un nuevo huesped
                GestionDeHuesped GDH = new GestionDeHuesped(fi, ff, hab, cantidadPersonas);
                abrirVentana(GDH);
            } else if (respuesta == 1) {

                //De responder que si, se mustra una ventana con la lista de huespedes registrados activos
                MostrarHuespedes mh = new MostrarHuespedes(fi, ff, hab, cantidadPersonas);
                abrirVentana(mh);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "La cantidad de personas debe ser un numero entero", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
        } catch (NullPointerException e) {

            JOptionPane.showMessageDialog(this, "No puede haber campos vacios", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jBSiguienteActionPerformed

    //BOTON LIMPIAR
    private void jBLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBLimpiarActionPerformed

        //Limpia la tabla, vacia los TextFields, DateChooser y ComboBox
        limpiarTabla();
        jTFCantidad.setText("");
        jTFPrecio.setText("");
        jDCInicio.setDate(null);
        jDCFinal.setDate(null);
        jCBCategorias.removeAllItems();
    }//GEN-LAST:event_jBLimpiarActionPerformed

    //BOTON SALIR
    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed

        //Cierra la ventana
        dispose();
    }//GEN-LAST:event_jBSalirActionPerformed

    //Se captura el evento de creacion de una ventana para deshabilitar los botones y campos de texto de la ventana actual mientras esta en segundo plano
    private void jDesktopPane1ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jDesktopPane1ComponentAdded

        if (!jTFPrecio.getText().isEmpty()) {
            habilitar(false);
        }
    }//GEN-LAST:event_jDesktopPane1ComponentAdded

    //Se captura el evento de remocion de una ventana para volver a habilitar los botones y campos de texto de la ventana
    private void jDesktopPane1ComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jDesktopPane1ComponentRemoved

        habilitar(true);
        //Se limpia la tabla y se cargan las reservas nuevamente
        limpiarTabla();
        cargarDatos();
    }//GEN-LAST:event_jDesktopPane1ComponentRemoved

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jBFiltrar;
    private javax.swing.JButton jBLimpiar;
    private javax.swing.JButton jBSalir;
    private javax.swing.JButton jBSiguiente;
    private javax.swing.JComboBox<Categoria> jCBCategorias;
    private com.toedter.calendar.JDateChooser jDCFinal;
    private com.toedter.calendar.JDateChooser jDCInicio;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLLogo;
    private javax.swing.JLabel jLMargen;
    private javax.swing.JLayeredPane jLPCabecera;
    private javax.swing.JLabel jLTitulo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTFCantidad;
    private javax.swing.JTextField jTFPrecio;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    //Este metodo permite setear un modelo de tabla personalizado
    private void armarTabla() {

        //Se agregan las columnas con su nombre correspondiente al modelo de tabla creado anteriormente
        modelo.addColumn("ID");
        modelo.addColumn("Numero");
        modelo.addColumn("Piso");
        modelo.addColumn("Categoria");
        modelo.addColumn("Precio por noche");

        //Se setea el modelo de tabla a la tabla de habitacion
        jTable1.setModel(modelo);

        //Se recupera el modelo de columnas
        TableColumnModel columnas = jTable1.getColumnModel();

        //Se llama al metodo que se encarga de setear el ancho de las columnas
        anchoColumna(columnas, 0, 40);
        anchoColumna(columnas, 1, 70);
        anchoColumna(columnas, 2, 60);
        anchoColumna(columnas, 4, 120);
    }

    //Este metodo se usa para setear el ancho de una columna
    //Recibe por parametro el modelo de columna de la tabla, el indice de la columna a modificar y el ancho deseado
    private void anchoColumna(TableColumnModel modeloTabla, int indice, int ancho) {

        modeloTabla.getColumn(indice).setWidth(ancho);
        modeloTabla.getColumn(indice).setMaxWidth(ancho + 30);
        modeloTabla.getColumn(indice).setMinWidth(ancho - 10);
        modeloTabla.getColumn(indice).setPreferredWidth(ancho);
    }

    //Este metodo se encarga de filtrar las reservas disponibles en cierto periodo de tiempo y cargarlas en la tabla de reservas
    private void cargarDatos() {

        try {

            //Se convierten las fechas de los date chooser a LocalDate
            LocalDate fi = jDCInicio.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate ff = jDCFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

            //Se crea una lista re reservas, una de habitacion y un mapa de habitacion
            ArrayList<Reserva> ListaDeReserva = Vista.getRD().listarReservas();
            ArrayList<Habitacion> listaDeHabitacion = Vista.getHabD().listarHabitaciones();
            Map<Integer, Habitacion> listaDeHab = new HashMap();

            //Se recupera la categoria seleccionada del CB
            Categoria cat = (Categoria) jCBCategorias.getSelectedItem();

            //Paso la lista de habitaciones a un hash map
            for (Habitacion hab : listaDeHabitacion) {

                if (hab.getCategoria().getTipoCategoria().equals(cat.getTipoCategoria())) {

                    listaDeHab.put(hab.getNro(), hab);
                }
            }
            //Se recorre la lista de reservas, y si alguna coincide con las fechas ingresadas por el usuario, esa reserva
            //Sera borrada del hash map de habitaciones
            for (Reserva reserva : ListaDeReserva) {

                if (!((fi.isBefore(reserva.getFi()) && ff.isBefore(reserva.getFi())) || (fi.isAfter(reserva.getFf()) && ff.isAfter(reserva.getFf())))) {

                    listaDeHab.remove(reserva.getHabitacion().getNro());
                }
            }

            //Se recorre el mapa y se agregan las reservas a la tabla
            for (Map.Entry<Integer, Habitacion> entry : listaDeHab.entrySet()) {

                Integer key = entry.getKey();
                Habitacion value = entry.getValue();
                cargarTabla(value);
            }
        } catch (Exception e) {
        }
    }

    //Este metodo se encarga de limpiar la tabla
    private void limpiarTabla() {

        int filas = modelo.getRowCount() - 1;
        for (int i = filas; i >= 0; i--) {

            modelo.removeRow(i);
        }
    }

    //Este metodo recibe una habitacion, y desglosa su informacion 
    private void cargarTabla(Habitacion hab) {

        modelo.addRow(new Object[]{
            Integer.toString(hab.getIdHabitacion()),
            Integer.toString(hab.getNro()),
            Integer.toString(hab.getPiso()),
            hab.getCategoria().getTipoCategoria(),
            Double.toString(hab.getCategoria().getPrecio())
        });
    }

    //Recibe un componente y lo agrega a la pantalla
    private void abrirVentana(Component cpm) {

        cpm.setVisible(true);
        jDesktopPane1.add(cpm);
        jDesktopPane1.moveToFront(cpm);
    }

    //Este metodo se encarga de hacer las comprobaciones
    private boolean comprobarDatos() {

        try {

            //Se convierten las fechas de los date chooser a LocalDate
            LocalDate fi = jDCInicio.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate ff = jDCFinal.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            
            //Se comprueba que la fecha ingresada sea posterior a la fecha actual
            if (ff.isBefore(LocalDate.now(ZoneId.systemDefault())) || fi.isBefore(LocalDate.now(ZoneId.systemDefault()))) {

                JOptionPane.showMessageDialog(this, "La fecha debe ser posterior al dia de hoy", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
                return true;
            }

            //Se verifica que la fecha de inicio sea previa a la fecha de fin de la reserva
            if (fi.isAfter(ff)) {

                JOptionPane.showMessageDialog(this, "La fecha de inicio debe ser anterior a la fecha de final", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
                return true;
            }

            //Se parsea la cantidad de personas y se valida que este en un rango correcto
            int cant = Integer.parseInt(jTFCantidad.getText());
            if (cant <= 0 || cant > 4) {

                JOptionPane.showMessageDialog(this, "Ingrese una cantidad de personas de 1 a 4", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
                return true;
            }
        } catch (NumberFormatException e) {

            JOptionPane.showMessageDialog(this, "La cantidad de personas debe ser un numero entero", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            return true;
        } catch (NullPointerException e) {

            JOptionPane.showMessageDialog(this, "Fecha incorrecta", "ADVERTENCIA", JOptionPane.WARNING_MESSAGE);
            return true;
        }
        return false;
    }

    //Este metodo recibe un valor booleano, y dependiendo del mismo, habilita o deshabilita componentes de la vista
    private void habilitar(boolean valor) {

        jDCInicio.setEnabled(valor);
        jDCFinal.setEnabled(valor);
        jTFCantidad.setEnabled(valor);
        jBFiltrar.setEnabled(valor);
        jBLimpiar.setEnabled(valor);
        jBSiguiente.setEnabled(valor);
        jBSalir.setEnabled(valor);
        jCBCategorias.setEnabled(valor);
        jTable1.setEnabled(valor);
    }
}